ifeq ($(ROOTDIR),)
    $(error Please do not use this file directly as it is intended to be included)
endif

ignition_config := $(MAKEDIR)ignition

### Ignition configuration and its components
ignition_template := $(MAKEDIR)default.json
ignition_sysctl_files := $(wildcard $(ignition_config)/sysctl/*.conf)
ignition_users_files := $(wildcard $(ignition_config)/users/*)
ignition_network_files := $(wildcard $(ignition_config)/network/*.network)
ignition_units_names := $(foreach f,$(wildcard $(ignition_config)/units/*),$(notdir $(f)))
ignition_dropins_names := $(foreach f,$(wildcard $(ignition_config)/dropins/*),$(notdir $(f)))

ignition_root_files := $(if $(wildcard $(ignition_config)/files),$(patsubst ./%,%,$(shell (cd '$(ignition_config)/files' && find . -type f -print))))
ignition_root_directories := $(if $(wildcard $(ignition_config)/files),$(patsubst ./%,%,$(shell (cd '$(ignition_config)/files' && find . -type d -print))))

### Macros for handling the ignition subsystem

# XXX: because fuck CoreOS for breaking cloud-init right before deprecating it

# ignition_sysctl '$contents.json' '$target.json' '$filename' '$decimal-mode'
define ignition_sysctl
$(2): $(1)	| $(patsubst %/,%,$(dir $(2)))
	@printf '[-] Building ignition file from contents %s: %s\n' '$(1)' '$(2)'
	@jq -n --arg name '$(3)' --argjson mode '$(4)' --slurpfile contents '$(1)' '{ filesystem: "root", path: ("/etc/sysctl.d/" + $$$$name), mode: $$$$mode, contents: { source: ("data:," + ($$$$contents[0] | @uri)) } }' >| '$(2)'
endef

# ignition_unit_file '$unit.service' '$source.service.json-raw' '$output.json'
define ignition_unit_file
$(3): $(2)
	@printf '[-] Creating ignition unit file %s: %s\n' '$(3)' '$(2)'
	@jq -n --arg name '$(1)' --slurpfile contents '$(2)' '{ name: $$$$name, enable: false, contents: $$$$contents[0], dropins: [] }' >| '$(3)'
endef

# ignition_unit_dropins '$target.json' '$space-separated-dropins'
define ignition_unit_dropins
$(1): $(2)
	@printf '[-] Creating ignition unit dropins %s: %s\n' '$(1)' '$(2)'
	@jq '[., inputs]' $(2) >| '$(1)'
endef

# ignition_dropin_file '$filename' '$contents' '$target.json'
define ignition_dropin_file
$(3): $(2)	| $(patsubst %/,%,$(dir $(3)))
	@jq -n --arg name '$(1)' --slurpfile contents '$(2)' '{ name: $$$$name, contents: $$$$contents[0] }' >| '$(3)'
endef

# ignition_unit '$target.json' '$unit.json' '$dropins.json'
define ignition_unit
$(1): $(2) $(3)	| $(patsubst %/,%,$(dir $(1)))
	@printf '[*] Combining ignition unit %s: %s %s\n' '$(1)' '$(2)' '$(3)'
	@jq '.dropins = (inputs // .dropins)' $$(foreach dropin,$$^,'$$(dropin)') >| '$(1)'
endef

# ignition_unit_missing '$unit.service' '$target.json' '$dropins.json'
define ignition_unit_missing
$(2): $(3)	| $(patsubst %/,%,$(dir $(2)))
	@printf '[*] Combining (missing) ignition unit %s: %s\n' '$(2)' '$(3)'
	@jq -n --arg name '$(1)' --slurpfile dropins '$(3)' '{ name: $$$$name, dropins: $$$$dropins[0] }' >| '$(2)'
endef

# ignition_user '$target.json' '$source.json' '$list-of-json-files'
define ignition_user
$(1): $(2) $(3)	| $(patsubst %/,%,$(dir $(1)))
	@printf '[*] Combining files for user into %s: %s\n' '$(1)' '$$^'
	@jq 'reduce inputs as $$$$item (.; . * $$$$item)' '$(2)' $(3) >| '$(1)'
endef

# ignition_root_file '$contents.json' '$target.json' '$filename' '$decimal-mode'
define ignition_root_file
$(2): $(1)	| $(patsubst %/,%,$(dir $(2)))
	@printf '[-] Building ignition file from contents %s: %s\n' '$(1)' '$(2)'
	@jq -n --arg name '$(3)' --argjson mode '$(4)' --slurpfile contents '$(1)' '{ filesystem: "root", path: ("/" + $$$$name), mode: $$$$mode, contents: { source: ("data:," + ($$$$contents[0] | @uri)) } }' >| '$(2)'
endef

