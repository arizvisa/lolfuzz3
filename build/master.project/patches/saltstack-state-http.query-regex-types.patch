This patch is based on PR #50150 and adds support for regex status types
against an http.query state. This allows us to conditionally update etcd
since SaltStack is pretty shitty and their mod_etcd module can only succeed
or fail, and isn't at all capable of tracking whether an etcd path exists
and needs to be updated, or doesn't and needs to be created.

diff --git a/salt/modules/http.py b/salt/modules/http.py
index d11eff2f13..42308d8c3f 100644
--- a/salt/modules/http.py
+++ b/salt/modules/http.py
@@ -32,6 +32,9 @@ def query(url, **kwargs):
             params='key1=val1&key2=val2'
         salt '*' http.query http://somelink.com/ method=POST \
             data='<xml>somecontent</xml>'
+
+    For more information about the ``http.query`` module, refer to the
+    :ref:`HTTP Tutorial <tutorial-http>`.
     '''
     opts = __opts__.copy()
     if 'opts' in kwargs:
diff --git a/salt/states/http.py b/salt/states/http.py
index 2bd124478f..9e9e5e4c24 100644
--- a/salt/states/http.py
+++ b/salt/states/http.py
@@ -20,7 +20,7 @@ __monitor__ = [
 log = logging.getLogger(__name__)
 
 
-def query(name, match=None, match_type='string', status=None, wait_for=None, **kwargs):
+def query(name, match=None, match_type='string', status=None, status_type='string', wait_for=None, **kwargs):
     '''
     Perform an HTTP query and statefully return the result
 
@@ -36,7 +36,7 @@ def query(name, match=None, match_type='string', status=None, wait_for=None, **k
         text.
 
     match_type
-        Specifies the type of pattern matching to use. Default is ``string``, but
+        Specifies the type of pattern matching to use on match. Default is ``string``, but
         can also be set to ``pcre`` to use regular expression matching if a more
         complex pattern matching is required.
 
@@ -50,6 +50,19 @@ def query(name, match=None, match_type='string', status=None, wait_for=None, **k
         The status code for a URL for which to be checked. Can be used instead of
         or in addition to the ``match`` setting.
 
+    status_type
+        Specifies the type of pattern matching to use for status. Default is ``string``, but
+        can also be set to ``pcre`` to use regular expression matching if a more
+        complex pattern matching is required.
+
+        .. versionadded:: Neon
+
+        .. note::
+
+            Despite the name of ``match_type`` for this argument, this setting
+            actually uses Python's ``re.search()`` function rather than Python's
+            ``re.match()`` function.
+
     If both ``match`` and ``status`` options are set, both settings will be checked.
     However, note that if only one option is ``True`` and the other is ``False``,
     then ``False`` will be returned. If this case is reached, the comments in the
@@ -94,14 +107,14 @@ def query(name, match=None, match_type='string', status=None, wait_for=None, **k
 
     if match is not None:
         if match_type == 'string':
-            if match in data.get('text', ''):
+            if str(match) in data.get('text', ''):
                 ret['result'] = True
                 ret['comment'] += ' Match text "{0}" was found.'.format(match)
             else:
                 ret['result'] = False
                 ret['comment'] += ' Match text "{0}" was not found.'.format(match)
         elif match_type == 'pcre':
-            if re.search(match, data.get('text', '')):
+            if re.search(str(match), str(data.get('text', ''))):
                 ret['result'] = True
                 ret['comment'] += ' Match pattern "{0}" was found.'.format(match)
             else:
@@ -109,13 +122,25 @@ def query(name, match=None, match_type='string', status=None, wait_for=None, **k
                 ret['comment'] += ' Match pattern "{0}" was not found.'.format(match)
 
     if status is not None:
-        if data.get('status', '') == status:
-            ret['comment'] += 'Status {0} was found, as specified.'.format(status)
-            if ret['result'] is None:
-                ret['result'] = True
-        else:
-            ret['comment'] += 'Status {0} was not found, as specified.'.format(status)
-            ret['result'] = False
+        if status_type == 'string':
+            if data.get('status', '') == str(status):
+                ret['comment'] += ' Status {0} was found.'.format(status)
+                if ret['result'] is None:
+                    ret['result'] = True
+            else:
+                ret['comment'] += ' Status {0} was not found.'.format(status)
+                ret['result'] = False
+        elif status_type == 'pcre':
+            if re.search(str(status), str(data.get('status', ''))):
+                ret['comment'] += ' Status pattern "{0}" was found.'.format(status)
+                if ret['result'] is None:
+                    ret['result'] = True
+            else:
+                ret['comment'] += ' Status pattern "{0}" was not found.'.format(status)
+                ret['result'] = False
+
+    # cleanup spaces in comment
+    ret['comment'] = ret['comment'].strip()
 
     if __opts__['test'] is True:
         ret['result'] = None
diff --git a/salt/utils/http.py b/salt/utils/http.py
index eb32f19381..0566842303 100644
--- a/salt/utils/http.py
+++ b/salt/utils/http.py
@@ -748,7 +748,7 @@ def update_ca_bundle(
         source=None,
         opts=None,
         merge_files=None,
-    ):
+        ):
     '''
     Attempt to update the CA bundle file from a URL
 
