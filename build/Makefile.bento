###############################################################################
# Makefile.bento
#
# This file specifies the build rules for the build/chef-bento module.
###############################################################################

ifeq ($(ROOTDIR),)
    $(error Please do not use this file directly as it is intended to be included)
endif

# TODO: It might make more sense to build these in parallel, but I haven't tested
# 		to see if packer builds in parallel w/o issues. The following eval will
#		enable parallel building:
# $$(eval $$(call build_bento_all,$(1),$$(patsubst %.json,%,$$(notdir $(1)))))

BENTO_TEMPLATES :=

define build_bento
BENTO_TEMPLATES := $$(BENTO_TEMPLATES) $$(patsubst %.json,%,$$(notdir $(1)))
.PHONY: bento/$$(patsubst %.json,%,$$(notdir $(1)))
bento/$$(patsubst %.json,%,$$(notdir $(1))): $$(if $$(platform),$$(foreach target,$$(platform),bento/$$(patsubst %.json,%,$$(notdir $(1)))/$$(target)),bento/$$(patsubst %.json,%,$$(notdir $(1))/all))

.PHONY: bento/$$(patsubst %.json,%,$$(notdir $(1)))/help
bento/$$(patsubst %.json,%,$$(notdir $(1)))/help:
	@printf 'The following platforms are available for bento/%s:\n\n' '$$(patsubst %.json,%,$$(notdir $(1)))'
	@printf '\tbento/$$(patsubst %.json,%,$$(notdir $(1)))/%s\n' $$(shell jq -r '[.builders[].type] | map(rtrimstr("-iso")) | unique | join(" ")' '$(1)')

$$(foreach target,$$(shell jq -r '[.builders[].type] | map(rtrimstr("-iso")) | unique | join(" ")' '$(1)'),$$(eval $$(call build_bento_platform,$(1),$$(patsubst %.json,%,$$(notdir $(1))),$$(target))))
endef

### The following defines recipes to build an individual box
define build_bento_platform
build_bento_platform_box := $$(shell jq -r '.variables | if .box_basename? then .box_basename else .template end' '$(1)')
.PHONY: bento/$(2)/$(3)

# If we're building $(2) for vmware, then set the default recipe to build an ova template
ifeq ($(3),vmware)

$$(eval $$(call box2ova,$$(workdir)/$$(build_bento_platform_box).$(3).box,$$(outdir)/$$(build_bento_platform_box).ova))
bento/$(2)/$(3): $$(outdir)/$$(build_bento_platform_box).ova
	@test -e '$$<'
	@printf '[*] Successfully built %s from template %s\n' '$$@' '$(1)'

# Otherwise, $(2) is a vagrant box and we'll just emit that by default
else
bento/$(2)/$(3): $$(outdir)/$$(build_bento_platform_box).$(3).box
	@test -e '$$<'
	@printf '[*] Successfully built %s from template %s\n' '$$@' '$(1)'
endif

$$(outdir)/$$(build_bento_platform_box).$(3).box: $$(workdir)/$$(build_bento_platform_box).$(3).box
	@test -e '$$<'
	@ln '$$<' '$$@'

$$(workdir)/$$(build_bento_platform_box).$(3).box: $(1) $$(workdir)/$(2).$(3).validate $$(MAKEDIR)/bento-vars.json	| $$(workdir)
	@printf '[!] Building %s from template: %s\n' '$$@' '$$<'
	@packer build -only '$(3)-iso' -var-file '$$(MAKEDIR)/bento-vars.json' -var 'build_directory=$$(workdir)' '$$<'

$$(workdir)/$(2).$(3).validate: $(1) $$(MAKEDIR)/bento-vars.json	| $$(workdir)
	@printf '[*] Validating template: %s\n' '$$<'
	@packer validate -only '$(3)-iso' -var-file '$$(MAKEDIR)/bento-vars.json' -var 'build_directory=$$(workdir)' '$$<'
	jq -r --arg platform '$(3)' '(.variables | if .box_basename? then .box_basename else .template end) as $$$$name | ($$$$name + "." + $$$$platform + ".box")' '$$<' >| '$$@'
endef

### The following defines recipes to build all platforms for a box in parallel
define build_bento_all
build_bento_all_boxen := $$(foreach target,$$(shell jq -r '[.builders[].type] | map(rtrimstr("-iso")) | unique | join(" ")' '$(1)'),$$(workdir)/$$(shell jq -r '.variables | if .box_basename? then .box_basename else .template end' '$(1)').$$(target).box)
.PHONY: bento/$(2)/all
bento/$(2)/all: $$(build_bento_all_boxen)
	@printf '[*] Successfully built %s from template $(1)\n' $$^

$$(build_bento_all_boxen): $(1) $$(workdir)/$(2).all.validate $$(MAKEDIR)/bento-vars.json	| $$(workdir)
	@printf '[!] Building %s from template: %s\n' '$$@' '$$<'
	packer build -var-file '$$(MAKEDIR)/bento-vars.json' -var 'build_directory=$$(workdir)' '$$<'

$$(workdir)/$(2).all.validate: $(1) $$(MAKEDIR)/bento-vars.json	| $$(workdir)
	@printf '[*] Validating template: %s\n' '$$<'
	packer validate -var-file '$$(MAKEDIR)/bento-vars.json' -var 'build_directory=$$(workdir)' '$$<'
	jq -r '(.variables | if .box_basename? then .box_basename else .template end) as $$$$name | [.builders[].type] | map($$$$name + "." + rtrimstr("-iso") + ".box") | .[] | unique' '$$<' >| '$$@'
endef
